// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import { Test, console2 } from "forge-std/Test.sol";
import { IAccountRegistry } from "../src/interfaces/IAccountRegistry.sol";
import { MockAccountRegistry } from "../src/mocks/MockAccountRegistry.sol";
import { ProofOfP2PNFTV3 } from "../src/ProofOfP2PNFTV3.sol";

contract ProofOfP2PNFTV3Test is Test {
    ProofOfP2PNFTV3 public proofOfP2PNFTV3;
    MockAccountRegistry public accountRegistry;

    function setUp() public {
        accountRegistry = new MockAccountRegistry();

        // Register user 0x1
        accountRegistry.setAccountId(
            address(1),
            bytes32(0x0741728e3aae72eda484e8ccbf00f843c38eae9c399b9bd7fb2b5ee7a055b6bf)
        );

        proofOfP2PNFTV3 = new ProofOfP2PNFTV3(
            accountRegistry,
            "Proof of Revolut",
            "PoRevolut",
            "Revolut",
            "001489",
            "012169",
            "C8102E",
            "FFDD00"
        );
    }
    
    function test_Mint() public {
        uint256 prevMinted = proofOfP2PNFTV3.getTokenId(address(1));
        assertEq(prevMinted, 0);

        vm.startPrank(address(1));
        proofOfP2PNFTV3.mintSBT();
        vm.stopPrank();
        
        uint256 tokenId = proofOfP2PNFTV3.currentTokenId();
        assertEq(tokenId, 1);

        address owner = proofOfP2PNFTV3.ownerOf(tokenId);
        assertEq(owner, address(1));

        uint256 balance = proofOfP2PNFTV3.balanceOf(address(1));
        assertEq(balance, 1);

        uint256 currMinted = proofOfP2PNFTV3.getTokenId(address(1));
        assertEq(currMinted, 1);

        string memory tokenURI = proofOfP2PNFTV3.tokenURI(tokenId);
        string memory expectedTokenURI = "data:application/json;base64,";
        assertEq(tokenURI, expectedTokenURI);
    }

    function test_MintTwoSameIdHash() public {
        vm.startPrank(address(1));
        proofOfP2PNFTV3.mintSBT();
        vm.stopPrank();

        // Register user 0x2 with same ID Hash
        accountRegistry.setAccountId(
            address(2),
            bytes32(0x0741728e3aae72eda484e8ccbf00f843c38eae9c399b9bd7fb2b5ee7a055b6bf)
        );
        vm.startPrank(address(2));
        proofOfP2PNFTV3.mintSBT();
        vm.stopPrank();
        
        uint256 currTokenId = proofOfP2PNFTV3.currentTokenId();
        assertEq(currTokenId, 2);

        address ownerOne = proofOfP2PNFTV3.ownerOf(1);
        assertEq(ownerOne, address(1));

        uint256 balanceOne = proofOfP2PNFTV3.balanceOf(address(1));
        assertEq(balanceOne, 1);

        uint256 mintedOne = proofOfP2PNFTV3.getTokenId(address(1));
        assertEq(mintedOne, 1);

        address ownerTwo = proofOfP2PNFTV3.ownerOf(2);
        assertEq(ownerTwo, address(2));

        uint256 balanceTwo = proofOfP2PNFTV3.balanceOf(address(2));
        assertEq(balanceTwo, 1);

        uint256 mintedTwo = proofOfP2PNFTV3.getTokenId(address(2));
        assertEq(mintedTwo, 2);
    }

    function test_MintTwoDifferentIdHash() public {
        vm.startPrank(address(1));
        proofOfP2PNFTV3.mintSBT();
        vm.stopPrank();

        // Register user 0x2
        accountRegistry.setAccountId(
            address(2),
            bytes32(uint256(2))
        );
        vm.startPrank(address(2));
        proofOfP2PNFTV3.mintSBT();
        vm.stopPrank();
        
        uint256 currTokenId = proofOfP2PNFTV3.currentTokenId();
        assertEq(currTokenId, 2);

        address ownerOne = proofOfP2PNFTV3.ownerOf(1);
        assertEq(ownerOne, address(1));

        uint256 balanceOne = proofOfP2PNFTV3.balanceOf(address(1));
        assertEq(balanceOne, 1);

        uint256 mintedOne = proofOfP2PNFTV3.getTokenId(address(1));
        assertEq(mintedOne, 1);

        address ownerTwo = proofOfP2PNFTV3.ownerOf(2);
        assertEq(ownerTwo, address(2));

        uint256 balanceTwo = proofOfP2PNFTV3.balanceOf(address(2));
        assertEq(balanceTwo, 1);

        uint256 mintedTwo = proofOfP2PNFTV3.getTokenId(address(2));
        assertEq(mintedTwo, 2);
    }

    function test_RevertMintNotRegistered() public {
        vm.startPrank(address(0xd3ad));
        vm.expectRevert("Not registered");
        proofOfP2PNFTV3.mintSBT();
        vm.stopPrank();
    }

    function test_RevertMintNullified() public {
        vm.startPrank(address(1));
        proofOfP2PNFTV3.mintSBT();
        vm.expectRevert("Already minted for owner");
        proofOfP2PNFTV3.mintSBT();
        vm.stopPrank();
    }

    function test_RevertTransfers() public {
        vm.startPrank(address(1));
        proofOfP2PNFTV3.mintSBT();
        
        vm.expectRevert("ERC721 public transferFrom not allowed");
        proofOfP2PNFTV3.transferFrom(address(1), address(2), 1);

        vm.expectRevert("ERC721 public safeTransferFrom not allowed");
        proofOfP2PNFTV3.safeTransferFrom(address(1), address(2), 1);

        vm.expectRevert("ERC721 public safeTransferFrom not allowed");
        proofOfP2PNFTV3.safeTransferFrom(address(1), address(2), 1, "");
        vm.stopPrank();
    }
}
