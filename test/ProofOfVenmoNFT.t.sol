// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import { Test, console2 } from "forge-std/Test.sol";
import { IRamp } from "../src/interfaces/IRamp.sol";
import { MockRamp } from "../src/mocks/MockRamp.sol";
import { ProofOfVenmoNFT } from "../src/ProofOfVenmoNFT.sol";

contract ProofOfVenmoNFTTest is Test {
    ProofOfVenmoNFT public proofOfVenmoNFT;
    MockRamp public ramp;

    function setUp() public {
        ramp = new MockRamp();

        // Register user 0x1
        ramp.setAccountInfo(
            address(1),
            IRamp.AccountInfo({
                venmoIdHash: bytes32(0x0741728e3aae72eda484e8ccbf00f843c38eae9c399b9bd7fb2b5ee7a055b6bf),
                deposits: new uint256[](0)
            })
        );

        proofOfVenmoNFT = new ProofOfVenmoNFT(ramp);
    }

    function test_svg() public {
        vm.startPrank(address(1));
        proofOfVenmoNFT.mintSBT();
        vm.stopPrank();
        string memory svg = proofOfVenmoNFT.tokenURI(1);
        console2.log(svg);
    }
    
    function test_Mint() public {
        uint256 prevMinted = proofOfVenmoNFT.getTokenId(address(1));
        assertEq(prevMinted, 0);

        vm.startPrank(address(1));
        proofOfVenmoNFT.mintSBT();
        vm.stopPrank();
        
        uint256 tokenId = proofOfVenmoNFT.currentTokenId();
        assertEq(tokenId, 1);

        address owner = proofOfVenmoNFT.ownerOf(tokenId);
        assertEq(owner, address(1));

        uint256 balance = proofOfVenmoNFT.balanceOf(address(1));
        assertEq(balance, 1);

        uint256 currMinted = proofOfVenmoNFT.getTokenId(address(1));
        assertEq(currMinted, 1);

        string memory tokenURI = proofOfVenmoNFT.tokenURI(tokenId);
        string memory expectedTokenURI = "data:application/json;base64,";
        assertEq(tokenURI, expectedTokenURI);
    }

    function test_MintTwoSameIdHash() public {
        vm.startPrank(address(1));
        proofOfVenmoNFT.mintSBT();
        vm.stopPrank();

        // Register user 0x2 with same ID Hash
        ramp.setAccountInfo(
            address(2),
            IRamp.AccountInfo({
                venmoIdHash: bytes32(0x0741728e3aae72eda484e8ccbf00f843c38eae9c399b9bd7fb2b5ee7a055b6bf),
                deposits: new uint256[](0)
            })
        );
        vm.startPrank(address(2));
        proofOfVenmoNFT.mintSBT();
        vm.stopPrank();
        
        uint256 currTokenId = proofOfVenmoNFT.currentTokenId();
        assertEq(currTokenId, 2);

        address ownerOne = proofOfVenmoNFT.ownerOf(1);
        assertEq(ownerOne, address(1));

        uint256 balanceOne = proofOfVenmoNFT.balanceOf(address(1));
        assertEq(balanceOne, 1);

        uint256 mintedOne = proofOfVenmoNFT.getTokenId(address(1));
        assertEq(mintedOne, 1);

        address ownerTwo = proofOfVenmoNFT.ownerOf(2);
        assertEq(ownerTwo, address(2));

        uint256 balanceTwo = proofOfVenmoNFT.balanceOf(address(2));
        assertEq(balanceTwo, 1);

        uint256 mintedTwo = proofOfVenmoNFT.getTokenId(address(2));
        assertEq(mintedTwo, 2);
    }

    function test_MintTwoDifferentIdHash() public {
        vm.startPrank(address(1));
        proofOfVenmoNFT.mintSBT();
        vm.stopPrank();

        // Register user 0x2
        ramp.setAccountInfo(
            address(2),
            IRamp.AccountInfo({
                venmoIdHash: bytes32(uint256(2)),
                deposits: new uint256[](0)
            })
        );
        vm.startPrank(address(2));
        proofOfVenmoNFT.mintSBT();
        vm.stopPrank();
        
        uint256 currTokenId = proofOfVenmoNFT.currentTokenId();
        assertEq(currTokenId, 2);

        address ownerOne = proofOfVenmoNFT.ownerOf(1);
        assertEq(ownerOne, address(1));

        uint256 balanceOne = proofOfVenmoNFT.balanceOf(address(1));
        assertEq(balanceOne, 1);

        uint256 mintedOne = proofOfVenmoNFT.getTokenId(address(1));
        assertEq(mintedOne, 1);

        address ownerTwo = proofOfVenmoNFT.ownerOf(2);
        assertEq(ownerTwo, address(2));

        uint256 balanceTwo = proofOfVenmoNFT.balanceOf(address(2));
        assertEq(balanceTwo, 1);

        uint256 mintedTwo = proofOfVenmoNFT.getTokenId(address(2));
        assertEq(mintedTwo, 2);
    }

    function test_RevertMintNotRegistered() public {
        vm.startPrank(address(0xd3ad));
        vm.expectRevert("Not registered");
        proofOfVenmoNFT.mintSBT();
        vm.stopPrank();
    }

    function test_RevertMintNullified() public {
        vm.startPrank(address(1));
        proofOfVenmoNFT.mintSBT();
        vm.expectRevert("Already minted for owner");
        proofOfVenmoNFT.mintSBT();
        vm.stopPrank();
    }

    function test_RevertTransfers() public {
        vm.startPrank(address(1));
        proofOfVenmoNFT.mintSBT();
        
        vm.expectRevert("ERC721 public transferFrom not allowed");
        proofOfVenmoNFT.transferFrom(address(1), address(2), 1);

        vm.expectRevert("ERC721 public safeTransferFrom not allowed");
        proofOfVenmoNFT.safeTransferFrom(address(1), address(2), 1);

        vm.expectRevert("ERC721 public safeTransferFrom not allowed");
        proofOfVenmoNFT.safeTransferFrom(address(1), address(2), 1, "");
        vm.stopPrank();
    }
}
