// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import { Test, console2 } from "forge-std/Test.sol";
import { IRampV2 } from "../src/interfaces/IRampV2.sol";
import { MockRampV2 } from "../src/mocks/MockRampV2.sol";
import { ProofOfUpiNFTV1 } from "../src/ProofOfUpiNFTV1.sol";

contract ProofOfUpiNFTV1Test is Test {
    ProofOfUpiNFTV1 public proofOfUpiNFTV1;
    MockRampV2 public ramp;

    function setUp() public {
        ramp = new MockRampV2();

        // Register user 0x1
        ramp.setAccountInfo(
            address(1),
            IRampV2.AccountInfo({
                idHash: bytes32(0x0741728e3aae72eda484e8ccbf00f843c38eae9c399b9bd7fb2b5ee7a055b6bf),
                deposits: new uint256[](0)
            })
        );

        proofOfUpiNFTV1 = new ProofOfUpiNFTV1(ramp);
    }
    
    function test_Mint() public {
        uint256 prevMinted = proofOfUpiNFTV1.getTokenId(address(1));
        assertEq(prevMinted, 0);

        vm.startPrank(address(1));
        proofOfUpiNFTV1.mintSBT();
        vm.stopPrank();
        
        uint256 tokenId = proofOfUpiNFTV1.currentTokenId();
        assertEq(tokenId, 1);

        address owner = proofOfUpiNFTV1.ownerOf(tokenId);
        assertEq(owner, address(1));

        uint256 balance = proofOfUpiNFTV1.balanceOf(address(1));
        assertEq(balance, 1);

        uint256 currMinted = proofOfUpiNFTV1.getTokenId(address(1));
        assertEq(currMinted, 1);

        string memory tokenURI = proofOfUpiNFTV1.tokenURI(tokenId);
        string memory expectedTokenURI = "data:application/json;base64,";
        assertEq(tokenURI, expectedTokenURI);
    }

    function test_MintTwoSameIdHash() public {
        vm.startPrank(address(1));
        proofOfUpiNFTV1.mintSBT();
        vm.stopPrank();

        // Register user 0x2 with same ID Hash
        ramp.setAccountInfo(
            address(2),
            IRampV2.AccountInfo({
                idHash: bytes32(0x0741728e3aae72eda484e8ccbf00f843c38eae9c399b9bd7fb2b5ee7a055b6bf),
                deposits: new uint256[](0)
            })
        );
        vm.startPrank(address(2));
        proofOfUpiNFTV1.mintSBT();
        vm.stopPrank();
        
        uint256 currTokenId = proofOfUpiNFTV1.currentTokenId();
        assertEq(currTokenId, 2);

        address ownerOne = proofOfUpiNFTV1.ownerOf(1);
        assertEq(ownerOne, address(1));

        uint256 balanceOne = proofOfUpiNFTV1.balanceOf(address(1));
        assertEq(balanceOne, 1);

        uint256 mintedOne = proofOfUpiNFTV1.getTokenId(address(1));
        assertEq(mintedOne, 1);

        address ownerTwo = proofOfUpiNFTV1.ownerOf(2);
        assertEq(ownerTwo, address(2));

        uint256 balanceTwo = proofOfUpiNFTV1.balanceOf(address(2));
        assertEq(balanceTwo, 1);

        uint256 mintedTwo = proofOfUpiNFTV1.getTokenId(address(2));
        assertEq(mintedTwo, 2);
    }

    function test_MintTwoDifferentIdHash() public {
        vm.startPrank(address(1));
        proofOfUpiNFTV1.mintSBT();
        vm.stopPrank();

        // Register user 0x2
        ramp.setAccountInfo(
            address(2),
            IRampV2.AccountInfo({
                idHash: bytes32(uint256(2)),
                deposits: new uint256[](0)
            })
        );
        vm.startPrank(address(2));
        proofOfUpiNFTV1.mintSBT();
        vm.stopPrank();
        
        uint256 currTokenId = proofOfUpiNFTV1.currentTokenId();
        assertEq(currTokenId, 2);

        address ownerOne = proofOfUpiNFTV1.ownerOf(1);
        assertEq(ownerOne, address(1));

        uint256 balanceOne = proofOfUpiNFTV1.balanceOf(address(1));
        assertEq(balanceOne, 1);

        uint256 mintedOne = proofOfUpiNFTV1.getTokenId(address(1));
        assertEq(mintedOne, 1);

        address ownerTwo = proofOfUpiNFTV1.ownerOf(2);
        assertEq(ownerTwo, address(2));

        uint256 balanceTwo = proofOfUpiNFTV1.balanceOf(address(2));
        assertEq(balanceTwo, 1);

        uint256 mintedTwo = proofOfUpiNFTV1.getTokenId(address(2));
        assertEq(mintedTwo, 2);
    }

    function test_RevertMintNotRegistered() public {
        vm.startPrank(address(0xd3ad));
        vm.expectRevert("Not registered");
        proofOfUpiNFTV1.mintSBT();
        vm.stopPrank();
    }

    function test_RevertMintNullified() public {
        vm.startPrank(address(1));
        proofOfUpiNFTV1.mintSBT();
        vm.expectRevert("Already minted for owner");
        proofOfUpiNFTV1.mintSBT();
        vm.stopPrank();
    }

    function test_RevertTransfers() public {
        vm.startPrank(address(1));
        proofOfUpiNFTV1.mintSBT();
        
        vm.expectRevert("ERC721 public transferFrom not allowed");
        proofOfUpiNFTV1.transferFrom(address(1), address(2), 1);

        vm.expectRevert("ERC721 public safeTransferFrom not allowed");
        proofOfUpiNFTV1.safeTransferFrom(address(1), address(2), 1);

        vm.expectRevert("ERC721 public safeTransferFrom not allowed");
        proofOfUpiNFTV1.safeTransferFrom(address(1), address(2), 1, "");
        vm.stopPrank();
    }
}
