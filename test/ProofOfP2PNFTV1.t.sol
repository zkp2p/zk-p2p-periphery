// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import { Test, console2 } from "forge-std/Test.sol";
import { IRamp } from "../src/interfaces/IRamp.sol";
import { MockRamp } from "../src/mocks/MockRamp.sol";
import { ProofOfP2PNFTV1 } from "../src/ProofOfP2PNFTV1.sol";

contract ProofOfP2PNFTV1Test is Test {
    ProofOfP2PNFTV1 public proofOfP2PNFTV1;
    MockRamp public ramp;

    function setUp() public {
        ramp = new MockRamp();

        // Register user 0x1
        ramp.setAccountInfo(
            address(1),
            IRamp.AccountInfo({
                venmoIdHash: bytes32(0x0741728e3aae72eda484e8ccbf00f843c38eae9c399b9bd7fb2b5ee7a055b6bf),
                deposits: new uint256[](0)
            })
        );

        proofOfP2PNFTV1 = new ProofOfP2PNFTV1(ramp);
    }
    
    function test_Mint() public {
        uint256 prevMinted = proofOfP2PNFTV1.getTokenId(address(1));
        assertEq(prevMinted, 0);

        vm.startPrank(address(1));
        proofOfP2PNFTV1.mintSBT();
        vm.stopPrank();
        
        uint256 tokenId = proofOfP2PNFTV1.currentTokenId();
        assertEq(tokenId, 1);

        address owner = proofOfP2PNFTV1.ownerOf(tokenId);
        assertEq(owner, address(1));

        uint256 balance = proofOfP2PNFTV1.balanceOf(address(1));
        assertEq(balance, 1);

        uint256 currMinted = proofOfP2PNFTV1.getTokenId(address(1));
        assertEq(currMinted, 1);

        string memory tokenURI = proofOfP2PNFTV1.tokenURI(tokenId);
        string memory expectedTokenURI = "data:application/json;base64,eyJuYW1lIjoiUHJvb2Ygb2YgUDJQIiwgImRlc2NyaXB0aW9uIjoiVGhpcyBzb3VsYm91bmQgTkZUIHJlcHJlc2VudHMgcHJvb2YgdGhhdCB5b3UgYXJlIGEgdW5pcXVlIFpLUDJQIHVzZXIuIE1pbnQgdGhpcyBieSBnZW5lcmF0aW5nIGEgemVybyBrbm93bGVkZ2UgcHJvb2Ygb2YgYSBwYXltZW50IGNvbmZpcm1hdGlvbiBlbWFpbC4gWW91ciBpZGVudGlmaWVyIGlzIGhhc2hlZCwgc28gbm8gb25lIGtub3dzIHdobyB5b3UgYXJlIC0tIG9ubHkgdGhhdCB5b3UgYXJlIGFuIHVzZXIhXG5cbkhhc2hlZCBJRDogMHgwNzQxNzI4ZTNhYWU3MmVkYTQ4NGU4Y2NiZjAwZjg0M2MzOGVhZTljMzk5YjliZDdmYjJiNWVlN2EwNTViNmJmXG5cbiIsICJpbWFnZSI6ICJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUIzYVdSMGFEMGlNamt3SWlCb1pXbG5hSFE5SWpReU1DSWdkbWxsZDBKdmVEMGlNQ0F3SURJNU1DQTBNakFpSUhodGJHNXpQU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh5TURBd0wzTjJaeUlnZUcxc2JuTTZlR3hwYm1zOUoyaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6RTVPVGt2ZUd4cGJtc25QanhrWldaelBqeG1hV3gwWlhJZ2FXUTlJbVl4SWo0OFptVkpiV0ZuWlNCeVpYTjFiSFE5SW5Bd0lpQjRiR2x1YXpwb2NtVm1QU0prWVhSaE9tbHRZV2RsTDNOMlp5dDRiV3c3WW1GelpUWTBMRkJJVGpKYWVVSXpZVmRTTUdGRU1HNU5hbXQzU25sQ2IxcFhiRzVoU0ZFNVNucFJlVTFEWTJka2JXeHNaREJLZG1WRU1HNU5RMEYzU1VSSk5VMURRVEJOYWtGdVNVaG9kR0pITlhwUVUyUnZaRWhTZDA5cE9IWmtNMlF6VEc1amVreHRPWGxhZVRoNVRVUkJkMHd6VGpKYWVXTXJVRWhLYkZrelVXZGtNbXhyWkVkbk9VcDZTVFZOU0VJMFNubENiMXBYYkc1aFNGRTVTbnBSZVUxSVFqUktlVUp0WVZkNGMxQlRZMnBOTUVsNlQwUnNSVXA1T0N0UVF6bDZaRzFqS3lJdlBqeG1aVWx0WVdkbElISmxjM1ZzZEQwaWNERWlJSGhzYVc1ck9taHlaV1k5SW1SaGRHRTZhVzFoWjJVdmMzWm5LM2h0YkR0aVlYTmxOalFzVUVoT01scDVRak5oVjFJd1lVUXdiazFxYTNkS2VVSnZXbGRzYm1GSVVUbEtlbEY1VFVOaloyUnRiR3hrTUVwMlpVUXdiazFEUVhkSlJFazFUVU5CTUUxcVFXNUpTR2gwWWtjMWVsQlRaRzlrU0ZKM1QyazRkbVF6WkROTWJtTjZURzA1ZVZwNU9IbE5SRUYzVEROT01scDVZeXRRUjA1d1kyMU9jMXBUUW1wbFJEQnVUVlJCZVVwNVFtcGxWREJ1VFZSQmQwcDVRbmxRVTJONFRXcENkMlZEWTJkYWJXeHpZa1F3Ymtrd1dYcE9hMUV5VFVOamRsQnFkM1pqTTFwdVVHYzlQU0l2UGp4bVpVbHRZV2RsSUhKbGMzVnNkRDBpY0RJaUlIaHNhVzVyT21oeVpXWTlJbVJoZEdFNmFXMWhaMlV2YzNabkszaHRiRHRpWVhObE5qUXNVRWhPTWxwNVFqTmhWMUl3WVVRd2JrMXFhM2RLZVVKdldsZHNibUZJVVRsS2VsRjVUVU5qWjJSdGJHeGtNRXAyWlVRd2JrMURRWGRKUkVrMVRVTkJNRTFxUVc1SlNHaDBZa2MxZWxCVFpHOWtTRkozVDJrNGRtUXpaRE5NYm1ONlRHMDVlVnA1T0hsTlJFRjNURE5PTWxwNVl5dFFSMDV3WTIxT2MxcFRRbXBsUkRCdVRXcFJOVXA1UW1wbFZEQnVUVlJCZDBwNVFubFFVMk40VFdwQ2QyVkRZMmRhYld4ellrUXdia2w2VGtkUFZFMHdUbmxqZGxCcWQzWmpNMXB1VUdjOVBTSWdMejQ4Wm1WSmJXRm5aU0J5WlhOMWJIUTlJbkF6SWlCNGJHbHVhenBvY21WbVBTSmtZWFJoT21sdFlXZGxMM04yWnl0NGJXdzdZbUZ6WlRZMExGQklUakphZVVJellWZFNNR0ZFTUc1TmFtdDNTbmxDYjFwWGJHNWhTRkU1U25wUmVVMURZMmRrYld4c1pEQktkbVZFTUc1TlEwRjNTVVJKTlUxRFFUQk5ha0Z1U1Vob2RHSkhOWHBRVTJSdlpFaFNkMDlwT0haa00yUXpURzVqZWt4dE9YbGFlVGg1VFVSQmQwd3pUakphZVdNclVFZE9jR050VG5OYVUwSnFaVVF3Yms1VWEyNUpSMDQxVUZOamVFMUVRVzVKU0VrNVNucEZkMDFJUWpSS2VVSnRZVmQ0YzFCVFkycE9la2w0VVdwak5FcDVPQ3RRUXpsNlpHMWpLeUlnTHo0OFptVkNiR1Z1WkNCdGIyUmxQU0p2ZG1WeWJHRjVJaUJwYmowaWNEQWlJR2x1TWowaWNERWlJQzgrUEdabFFteGxibVFnYlc5a1pUMGlaWGhqYkhWemFXOXVJaUJwYmpJOUluQXlJaUF2UGp4bVpVSnNaVzVrSUcxdlpHVTlJbTkyWlhKc1lYa2lJR2x1TWowaWNETWlJSEpsYzNWc2REMGlZbXhsYm1SUGRYUWlJQzgrUEdabFIyRjFjM05wWVc1Q2JIVnlJR2x1UFNKaWJHVnVaRTkxZENJZ2MzUmtSR1YyYVdGMGFXOXVQU0kwTWlJZ0x6NDhMMlpwYkhSbGNqNGdQR05zYVhCUVlYUm9JR2xrUFNKamIzSnVaWEp6SWo0OGNtVmpkQ0IzYVdSMGFEMGlNamt3SWlCb1pXbG5hSFE5SWpReU1DSWdjbmc5SWpReUlpQnllVDBpTkRJaUlDOCtQQzlqYkdsd1VHRjBhRDQ4Y0dGMGFDQnBaRDBpZEdWNGRDMXdZWFJvTFdFaUlHUTlJazAwTUNBeE1pQklNalV3SUVFeU9DQXlPQ0F3SURBZ01TQXlOemdnTkRBZ1ZqTTRNQ0JCTWpnZ01qZ2dNQ0F3SURFZ01qVXdJRFF3T0NCSU5EQWdRVEk0SURJNElEQWdNQ0F4SURFeUlETTRNQ0JXTkRBZ1FUSTRJREk0SURBZ01DQXhJRFF3SURFeUlIb2lJQzgrUEhCaGRHZ2dhV1E5SW0xcGJtbHRZWEFpSUdROUlrMHlNelFnTkRRMFF6SXpOQ0EwTlRjdU9UUTVJREkwTWk0eU1TQTBOak1nTWpVeklEUTJNeUlnTHo0OFptbHNkR1Z5SUdsa1BTSjBiM0F0Y21WbmFXOXVMV0pzZFhJaVBqeG1aVWRoZFhOemFXRnVRbXgxY2lCcGJqMGlVMjkxY21ObFIzSmhjR2hwWXlJZ2MzUmtSR1YyYVdGMGFXOXVQU0l5TkNJZ0x6NDhMMlpwYkhSbGNqNDhiR2x1WldGeVIzSmhaR2xsYm5RZ2FXUTlJbWR5WVdRdGRYQWlJSGd4UFNJeElpQjRNajBpTUNJZ2VURTlJakVpSUhreVBTSXdJajQ4YzNSdmNDQnZabVp6WlhROUlqQXVNQ0lnYzNSdmNDMWpiMnh2Y2owaWQyaHBkR1VpSUhOMGIzQXRiM0JoWTJsMGVUMGlNU0lnTHo0OGMzUnZjQ0J2Wm1aelpYUTlJaTQ1SWlCemRHOXdMV052Ykc5eVBTSjNhR2wwWlNJZ2MzUnZjQzF2Y0dGamFYUjVQU0l3SWlBdlBqd3ZiR2x1WldGeVIzSmhaR2xsYm5RK1BHeHBibVZoY2tkeVlXUnBaVzUwSUdsa1BTSm5jbUZrTFdSdmQyNGlJSGd4UFNJd0lpQjRNajBpTVNJZ2VURTlJakFpSUhreVBTSXhJajQ4YzNSdmNDQnZabVp6WlhROUlqQXVNQ0lnYzNSdmNDMWpiMnh2Y2owaWQyaHBkR1VpSUhOMGIzQXRiM0JoWTJsMGVUMGlNU0lnTHo0OGMzUnZjQ0J2Wm1aelpYUTlJakF1T1NJZ2MzUnZjQzFqYjJ4dmNqMGlkMmhwZEdVaUlITjBiM0F0YjNCaFkybDBlVDBpTUNJZ0x6NDhMMnhwYm1WaGNrZHlZV1JwWlc1MFBqeHRZWE5ySUdsa1BTSm1ZV1JsTFhWd0lpQnRZWE5yUTI5dWRHVnVkRlZ1YVhSelBTSnZZbXBsWTNSQ2IzVnVaR2x1WjBKdmVDSStQSEpsWTNRZ2QybGtkR2c5SWpFaUlHaGxhV2RvZEQwaU1TSWdabWxzYkQwaWRYSnNLQ05uY21Ga0xYVndLU0lnTHo0OEwyMWhjMnMrUEcxaGMyc2dhV1E5SW1aaFpHVXRaRzkzYmlJZ2JXRnphME52Ym5SbGJuUlZibWwwY3owaWIySnFaV04wUW05MWJtUnBibWRDYjNnaVBqeHlaV04wSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlHWnBiR3c5SW5WeWJDZ2paM0poWkMxa2IzZHVLU0lnTHo0OEwyMWhjMnMrUEcxaGMyc2dhV1E5SW01dmJtVWlJRzFoYzJ0RGIyNTBaVzUwVlc1cGRITTlJbTlpYW1WamRFSnZkVzVrYVc1blFtOTRJajQ4Y21WamRDQjNhV1IwYUQwaU1TSWdhR1ZwWjJoMFBTSXhJaUJtYVd4c1BTSjNhR2wwWlNJZ0x6NDhMMjFoYzJzK1BHeHBibVZoY2tkeVlXUnBaVzUwSUdsa1BTSm5jbUZrTFhONWJXSnZiQ0krUEhOMGIzQWdiMlptYzJWMFBTSXdMamNpSUhOMGIzQXRZMjlzYjNJOUluZG9hWFJsSWlCemRHOXdMVzl3WVdOcGRIazlJakVpSUM4K1BITjBiM0FnYjJabWMyVjBQU0l1T1RVaUlITjBiM0F0WTI5c2IzSTlJbmRvYVhSbElpQnpkRzl3TFc5d1lXTnBkSGs5SWpBaUlDOCtQQzlzYVc1bFlYSkhjbUZrYVdWdWRENDhiV0Z6YXlCcFpEMGlabUZrWlMxemVXMWliMndpSUcxaGMydERiMjUwWlc1MFZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJajQ4Y21WamRDQjNhV1IwYUQwaU1qa3djSGdpSUdobGFXZG9kRDBpTWpBd2NIZ2lJR1pwYkd3OUluVnliQ2dqWjNKaFpDMXplVzFpYjJ3cElpQXZQand2YldGemF6NDhMMlJsWm5NK1BHY2dZMnhwY0Mxd1lYUm9QU0oxY213b0kyTnZjbTVsY25NcElqNDhjbVZqZENCbWFXeHNQU0l6UWpNNE9VUWlJSGc5SWpCd2VDSWdlVDBpTUhCNElpQjNhV1IwYUQwaU1qa3djSGdpSUdobGFXZG9kRDBpTkRJd2NIZ2lJQzgrUEhKbFkzUWdjM1I1YkdVOUltWnBiSFJsY2pvZ2RYSnNLQ05tTVNraUlIZzlJakJ3ZUNJZ2VUMGlNSEI0SWlCM2FXUjBhRDBpTWprd2NIZ2lJR2hsYVdkb2REMGlOREl3Y0hnaUlDOCtJRHhuSUhOMGVXeGxQU0ptYVd4MFpYSTZkWEpzS0NOMGIzQXRjbVZuYVc5dUxXSnNkWElwT3lCMGNtRnVjMlp2Y20wNmMyTmhiR1VvTVM0MUtUc2dkSEpoYm5ObWIzSnRMVzl5YVdkcGJqcGpaVzUwWlhJZ2RHOXdPeUkrUEhKbFkzUWdabWxzYkQwaWJtOXVaU0lnZUQwaU1IQjRJaUI1UFNJd2NIZ2lJSGRwWkhSb1BTSXlPVEJ3ZUNJZ2FHVnBaMmgwUFNJME1qQndlQ0lnTHo0OFpXeHNhWEJ6WlNCamVEMGlOVEFsSWlCamVUMGlNSEI0SWlCeWVEMGlNVGd3Y0hnaUlISjVQU0l4TWpCd2VDSWdabWxzYkQwaUl6QXdNQ0lnYjNCaFkybDBlVDBpTUM0NE5TSWdMejQ4TDJjK1BISmxZM1FnZUQwaU1DSWdlVDBpTUNJZ2QybGtkR2c5SWpJNU1DSWdhR1ZwWjJoMFBTSTBNakFpSUhKNFBTSTBNaUlnY25rOUlqUXlJaUJtYVd4c1BTSnlaMkpoS0RBc01Dd3dMREFwSWlCemRISnZhMlU5SW5KblltRW9NalUxTERJMU5Td3lOVFVzTUM0eUtTSWdMejQ4TDJjK1BIUmxlSFFnZEdWNGRDMXlaVzVrWlhKcGJtYzlJbTl3ZEdsdGFYcGxVM0JsWldRaVBqeDBaWGgwVUdGMGFDQnpkR0Z5ZEU5bVpuTmxkRDBpTFRFd01DVWlJR1pwYkd3OUluZG9hWFJsSWlCbWIyNTBMV1poYldsc2VUMGlKME52ZFhKcFpYSWdUbVYzSnl3Z2JXOXViM053WVdObElpQm1iMjUwTFhOcGVtVTlJakV3Y0hnaUlIaHNhVzVyT21oeVpXWTlJaU4wWlhoMExYQmhkR2d0WVNJK1NHRnphQ0RpZ0tJZ01IZ3dOelF4TnpJNFpUTmhZV1UzTW1Wa1lUUTROR1U0WTJOaVpqQXdaamcwTTJNek9HVmhaVGxqTXprNVlqbGlaRGRtWWpKaU5XVmxOMkV3TlRWaU5tSm1JRHhoYm1sdFlYUmxJR0ZrWkdsMGFYWmxQU0p6ZFcwaUlHRjBkSEpwWW5WMFpVNWhiV1U5SW5OMFlYSjBUMlptYzJWMElpQm1jbTl0UFNJd0pTSWdkRzg5SWpFd01DVWlJR0psWjJsdVBTSXdjeUlnWkhWeVBTSXpNSE1pSUhKbGNHVmhkRU52ZFc1MFBTSnBibVJsWm1sdWFYUmxJaUF2UGp3dmRHVjRkRkJoZEdnK0lEeDBaWGgwVUdGMGFDQnpkR0Z5ZEU5bVpuTmxkRDBpTUNVaUlHWnBiR3c5SW5kb2FYUmxJaUJtYjI1MExXWmhiV2xzZVQwaUowTnZkWEpwWlhJZ1RtVjNKeXdnYlc5dWIzTndZV05sSWlCbWIyNTBMWE5wZW1VOUlqRXdjSGdpSUhoc2FXNXJPbWh5WldZOUlpTjBaWGgwTFhCaGRHZ3RZU0krU0dGemFDRGlnS0lnTUhnd056UXhOekk0WlROaFlXVTNNbVZrWVRRNE5HVTRZMk5pWmpBd1pqZzBNMk16T0dWaFpUbGpNems1WWpsaVpEZG1ZakppTldWbE4yRXdOVFZpTm1KbUlEeGhibWx0WVhSbElHRmtaR2wwYVhabFBTSnpkVzBpSUdGMGRISnBZblYwWlU1aGJXVTlJbk4wWVhKMFQyWm1jMlYwSWlCbWNtOXRQU0l3SlNJZ2RHODlJakV3TUNVaUlHSmxaMmx1UFNJd2N5SWdaSFZ5UFNJek1ITWlJSEpsY0dWaGRFTnZkVzUwUFNKcGJtUmxabWx1YVhSbElpQXZQaUE4TDNSbGVIUlFZWFJvUGp4MFpYaDBVR0YwYUNCemRHRnlkRTltWm5ObGREMGlOVEFsSWlCbWFXeHNQU0ozYUdsMFpTSWdabTl1ZEMxbVlXMXBiSGs5SWlkRGIzVnlhV1Z5SUU1bGR5Y3NJRzF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE1IQjRJaUI0YkdsdWF6cG9jbVZtUFNJamRHVjRkQzF3WVhSb0xXRWlQazkzYm1WeUlPS0FvaUF3ZURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01ERWdQR0Z1YVcxaGRHVWdZV1JrYVhScGRtVTlJbk4xYlNJZ1lYUjBjbWxpZFhSbFRtRnRaVDBpYzNSaGNuUlBabVp6WlhRaUlHWnliMjA5SWpBbElpQjBiejBpTVRBd0pTSWdZbVZuYVc0OUlqQnpJaUJrZFhJOUlqTXdjeUlnY21Wd1pXRjBRMjkxYm5ROUltbHVaR1ZtYVc1cGRHVWlJQzgrUEM5MFpYaDBVR0YwYUQ0OGRHVjRkRkJoZEdnZ2MzUmhjblJQWm1aelpYUTlJaTAxTUNVaUlHWnBiR3c5SW5kb2FYUmxJaUJtYjI1MExXWmhiV2xzZVQwaUowTnZkWEpwWlhJZ1RtVjNKeXdnYlc5dWIzTndZV05sSWlCbWIyNTBMWE5wZW1VOUlqRXdjSGdpSUhoc2FXNXJPbWh5WldZOUlpTjBaWGgwTFhCaGRHZ3RZU0krVDNkdVpYSWc0b0NpSURCNE1EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNU0E4WVc1cGJXRjBaU0JoWkdScGRHbDJaVDBpYzNWdElpQmhkSFJ5YVdKMWRHVk9ZVzFsUFNKemRHRnlkRTltWm5ObGRDSWdabkp2YlQwaU1DVWlJSFJ2UFNJeE1EQWxJaUJpWldkcGJqMGlNSE1pSUdSMWNqMGlNekJ6SWlCeVpYQmxZWFJEYjNWdWREMGlhVzVrWldacGJtbDBaU0lnTHo0OEwzUmxlSFJRWVhSb1Bqd3ZkR1Y0ZEQ0OFp5QnpkSGxzWlQwaWRISmhibk5tYjNKdE9uUnlZVzV6YkdGMFpTZ3hNRFZ3ZUN3Z056QndlQ2tpUGp4emRtY2dkMmxrZEdnOUlqZzFJaUJvWldsbmFIUTlJamcxSWlCMmFXVjNRbTk0UFNJd0lEQWdNVGt5SURFNU1pSWdabWxzYkQwaWJtOXVaU0lnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JajQ4Y0dGMGFDQmtQU0pOTVRFekxqYzBOaUF4TVRndU16azJRekV4TkM0d05qY2dNVEU0TGpNNU5pQXhNak11TlRJeElERXhOeTQyTVRZZ01USTNMak0zTmlBeE1UWXVPVEk0UXpFMU1TNDBOekVnTVRFeExqRTBOU0F4TmprdU5ERTJJRGc1TGpNNU1USWdNVFk1TGpReE5pQTJNeTR6TmpreFF6RTJPUzQwTmpJZ016SXVPVFF4TWlBeE5EUXVPVEE0SURndU1qazFPRGtnTVRFMExqWTJOQ0E0TGpJNU5UZzVRekV4TkM0ek5ESWdPQzR5T1RVNE9TQXhNVFF1TURZM0lEZ3VNamsxT0RrZ01URXpMamMwTmlBNExqSTVOVGc1U0RFeE5DNDJOalJJTVRFMkxqY3lPVU14TVRVdU5Ea2dPQzR5T1RVNE9TQXhNVFF1TWprM0lEZ3VNalVnTVRFekxqQXhNU0E0TGpJMVNEVXlMalkyTURSRE16WXVNak13TXlBNExqSTFJREl5TGpnM05TQXlNUzQyTURVeklESXlMamczTlNBek9DNHdNelUwVmpFMU9DNHlNek5ETWpJdU9EYzFJREUzTWk0ek1qSWdNelF1TXpBeU55QXhPRE11TnpVZ05EZ3VNemt5TXlBeE9ETXVOelZETmpRdU16WXpOU0F4T0RNdU56VWdOemN1TXpVeE5pQXhOekF1T0RBNElEYzNMak0xTVRZZ01UVTBMamM1TVZZeE1qTXVNVFk1UXpjM0xqTTFNVFlnTVRJd0xqWTBOU0EzT1M0ME1UWTRJREV4T0M0MU9DQTRNUzQ1TkRFZ01URTRMalU0U0RFd055NHdORFZETVRBNUxqYzFNeUF4TVRndU5UZ2dNVEV6TGpjME5pQXhNVGd1TXpVeElERXhNeTQzTkRZZ01URTRMak0xTVZZeE1UZ3VNemsyV2lJZ1ptbHNiRDBpZFhKc0tDTndZV2x1ZERCZmJHbHVaV0Z5WHpJMU5GOHlOamM1S1NJdlBqeHdZWFJvSUdROUlrMHlNaTQxSURNM0xqYzFOemxNTWpNdU1EQXpPQ0F4TkRZdU5qSTFRek15TGpNd01UTWdNVEUxTGpNM05pQTFNeTQzTXpZZ01UQTNMalUwTVNBNE5pNHpPVEU1SURFeE5TNDJNRFZET1RNdU1qWXlJREV4Tnk0MU56VWdPVGd1TmpJd05pQXhNVGd1TWpFM0lERXdNeTR5T1RJZ01URTRMalJJTVRBMkxqUTVPRU14TURrdU1qQXhJREV4T0M0MElERXhNeTR4T0RVZ01URTRMakUzTVNBeE1UTXVNVGcxSURFeE9DNHhOekZETVRFekxqVXdOaUF4TVRndU1UY3hJREV5TWk0NU5ERWdNVEUzTGpNNU1pQXhNall1TnpnNElERXhOaTQzTURWRE1UTXdMalUwTkNBeE1UVXVOemc0SURFek5DNHhOaklnTVRFMExqUTJJREV6Tnk0MU5URWdNVEV5TGpneFF6RTBOQzQzT0RnZ01UQTRMamsyTVNBeE5UQXVOamsySURFd015NDNPRFFnTVRVMExqUXdOaUF4TURBdU16QXhRekUxT1M0NE5UWWdPVFF1TWprNU1TQXhOalF1TURJMElEZzNMakExT1RjZ01UWTJMalF3TmlBM09TNHdPRGN4UXpFMk55NDJPRGdnTnpNdU9EWXpOaUF4TmpndU16YzFJRFk0TGpFek5qSWdNVFk0TGpNM05TQTJNUzQ1TlRBMlF6RTJPQzR6TnpVZ05Ua3VOelV4TWlBeE5qZ3VNamd6SURVM0xqVTVOemNnTVRZNExqRTBOaUExTlM0ME9VTXhOalF1TnpFeElETXhMakF5TWpRZ01UUTFMak16TnlBeE1TNDNOemd5SURFeU1DNDRPQ0E0TGpjMU5ERXpRekV5TUM0d05UVWdPQzQyTmpJME9TQXhNVGt1TWpNeElEZ3VOVGN3T0RZZ01URTRMak0yTVNBNExqVXlOVEEwUXpFeE55NDJOelFnT0M0ME56a3lNaUF4TVRZdU9UZzNJRGd1TkRNek5DQXhNVFl1TXlBNExqUXpNelJETVRFMExqVXhNeUE0TGpNME1UYzJJREV4TWk0Mk9ERWdPQzR5TlRBeE1pQXhNVEF1T0RBMElEZ3VNalV3TVRKSU5USXVNakkwTmtNek5TNDROek00SURndU1qQTBNeUF5TWk0MU9URTJJREl4TGpReU1ETWdNakl1TlNBek55NDNOVGM1V2lJZ1ptbHNiRDBpZFhKc0tDTndZV2x1ZERGZmJHbHVaV0Z5WHpJMU5GOHlOamM1S1NJdlBqeHdZWFJvSUdROUlrMHhNRFl1TmpZM0lEazVMak0yTWpoRE1USXdMamd3TkNBeE1ETXVORFUxSURFek1TNDFORE1nTVRBMUxqQXdOeUF4TXprdU9ETTVJREV3TlM0d01EZERNVFEwTGpnMk5DQXhNRFV1TURBM0lERTBPQzQ1T0RnZ01UQTBMalF6TmlBeE5USXVOREl6SURFd015NDFNVE5ETVRZeUxqa3pPQ0E1TXk0ME5UY3lJREUyT1M0MUlEYzVMakkyTVRNZ01UWTVMalVnTmpNdU5USXpOME14TmprdU5UQTFJRE16TGpBek1ERWdNVFEwTGprd01TQTRMak13T0RZNElERXhOQzQxTlRjZ09DNHpNRGcyT0VNeE1UUXVNalV6SURndU16QTROamdnTVRFekxqazBPU0E0TGpNeE5EQXlJREV4TXk0Mk5EVWdPQzR6TVRrek5WWTRMak13T0RZNFNERXhOaTQyTlRSRE1URTFMalF6TWlBNExqSTNNVE0wSURFeE5DNHhPRGtnT0M0eU5TQXhNVEl1T1RNZ09DNHlOVWcxTWk0ek56UTRRek0xTGpnM05ETWdPQzR5TlNBeU1pNDFJREl4TGpZeU5ETWdNakl1TlNBek9DNHhNalE0VmprNUxqRXdNVFJETkRJdU5UTTNOU0EzTmk0ek9EQTFJRGN6TGpZNE56TWdPRGN1TlRNMU5pQXhNRFl1TmpZM0lEazVMak0yTWpoYUlpQm1hV3hzUFNKMWNtd29JM0JoYVc1ME1sOXNhVzVsWVhKZk1qVTBYekkyTnprcElpOCtQSEJoZEdnZ1pEMGlUVEV3Tmk0ME9EVWdOVEF1TWpVeU9VTXhNakF1TlRneUlEVTBMak15TlRFZ01UTXhMakk0TVNBMU5TNDRPREE0SURFek9TNDFPVElnTlRVdU9EZ3dPRU14TlRRdU9UYzBJRFUxTGpnNE1EZ2dNVFl4TGprd09DQTFNQzQxTnpNeUlERTJOaTQxSURRMkxqSXlOalZETVRVNUxqTXpOeUF5TkM0eU1UZzBJREV6T0M0Mk56TWdPQzR5T1RVM05TQXhNVFF1TXpNM0lEZ3VNamsxTnpWRE1URTBMakF4TlNBNExqSTVOVGMxSURFeE15NDNOQ0E0TGpJNU5UYzFJREV4TXk0ME1UZ2dPQzR5T1RVM05VZ3hNVFF1TXpNM1NERXhOaTQwTURORE1URTFMakUyTXlBNExqSTVOVGMxSURFeE15NDVOamtnT0M0eU5TQXhNVEl1TmpnMElEZ3VNalZJTlRJdU16QXhRek0xTGpnMk1qSWdPQzR5TlNBeU1pNDFJREl4TGpVMk5EY2dNakl1TlNBek55NDVORFE1VmpVd0xqQXlOREpETkRJdU5EYzBOU0F5Tnk0ME1qRXpJRGN6TGpVMk1USWdNemd1TlRNNU55QXhNRFl1TkRnMUlEVXdMakk1T0RkV05UQXVNalV5T1ZvaUlHWnBiR3c5SW5WeWJDZ2pjR0ZwYm5RelgyeHBibVZoY2w4eU5UUmZNalkzT1NraUx6NDhjR0YwYUNCa1BTSk5NVEEzTGpZeU1TQXlNUzQwTXpNMFF6RXlNUzQwTWpjZ01qVXVORFkxTkNBeE16RXVPVEExSURJM0xqQXdOVGNnTVRRd0xqQTBOU0F5Tnk0d01EVTNRekUwTlM0NE1ESWdNamN1TURBMU55QXhOVEF1TWpVMElESTJMakU1TURNZ01UVXpMamswTWlBeU5TNHdNVEkwUXpFME5TNDJNaklnTVRZdU1qWTRPQ0F4TXpRdU5URTBJREV3TGpJNE9EY2dNVEl4TGprMk55QTRMamMwT0RNMFF6RXlNUzR4TlRjZ09DNDJOVGMzTXlBeE1qQXVNelE0SURndU5UWTNNVE1nTVRFNUxqUTVNeUE0TGpVeU1UZ3lRekV4T0M0NE1Ua2dPQzQwTnpZMU1pQXhNVGd1TVRRMElEZ3VORE14TWpFZ01URTNMalEyT1NBNExqUXpNVEl4UXpFeE5TNDNNVFlnT0M0ek5EQTJNU0F4TVRNdU9URTNJRGd1TWpVZ01URXlMakEzTXlBNExqSTFTRFUwTGpVMU16VkROVE11TnpRMElEZ3VNalVnTlRJdU9UTTBOU0E0TGpJNU5UTWdOVEl1TVRJMUlEZ3VNemcxT1RGRE5qZ3VOVE01T0NBM0xqTTRPVEl6SURnM0xqYzBNamtnTVRRdU1qYzFOQ0F4TURjdU5qSXhJREl4TGpRM09EZFdNakV1TkRNek5Gb2lJR1pwYkd3OUluVnliQ2dqY0dGcGJuUTBYMnhwYm1WaGNsOHlOVFJmTWpZM09Ta2lMejQ4WkdWbWN6NDhiR2x1WldGeVIzSmhaR2xsYm5RZ2FXUTlJbkJoYVc1ME1GOXNhVzVsWVhKZk1qVTBYekkyTnpraUlIZ3hQU0l5TWk0NE56VWlJSGt4UFNJNE5DNDROVEE0SWlCNE1qMGlNVFk1TGpReE5pSWdlVEk5SWpnMExqZzFNRGdpSUdkeVlXUnBaVzUwVlc1cGRITTlJblZ6WlhKVGNHRmpaVTl1VlhObElqNDhjM1J2Y0NCemRHOXdMV052Ykc5eVBTSWpOREExTjBOQ0lpOCtQSE4wYjNBZ2IyWm1jMlYwUFNJd0xqRTVOamszSWlCemRHOXdMV052Ykc5eVBTSWpNME16UVRsR0lpOCtQSE4wYjNBZ2IyWm1jMlYwUFNJd0xqVTBOVFExTlNJZ2MzUnZjQzFqYjJ4dmNqMGlJelEwTVRVM01TSXZQanh6ZEc5d0lHOW1abk5sZEQwaU1TSWdjM1J2Y0MxamIyeHZjajBpSXpJNE1VTXpRU0l2UGp3dmJHbHVaV0Z5UjNKaFpHbGxiblErUEd4cGJtVmhja2R5WVdScFpXNTBJR2xrUFNKd1lXbHVkREZmYkdsdVpXRnlYekkxTkY4eU5qYzVJaUI0TVQwaU1qZ3VNREkxTmlJZ2VURTlJalkwTGpZek5DSWdlREk5SWpFM015NDVNREVpSUhreVBTSTJOQzQyTXpRaUlHZHlZV1JwWlc1MFZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJajQ4YzNSdmNDQnpkRzl3TFdOdmJHOXlQU0lqTnpneFF6ZEJJaTgrUEhOMGIzQWdiMlptYzJWMFBTSXhJaUJ6ZEc5d0xXTnZiRzl5UFNJak5UVXhOamN4SWk4K1BDOXNhVzVsWVhKSGNtRmthV1Z1ZEQ0OGJHbHVaV0Z5UjNKaFpHbGxiblFnYVdROUluQmhhVzUwTWw5c2FXNWxZWEpmTWpVMFh6STJOemtpSUhneFBTSXlNaTQxSWlCNU1UMGlOamt1TURZMk5TSWdlREk5SWpFMk9TNDNOQ0lnZVRJOUlqWTVMakEyTmpVaUlHZHlZV1JwWlc1MFZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJajQ4YzNSdmNDQnZabVp6WlhROUlqQXVNVFU1TkRJaUlITjBiM0F0WTI5c2IzSTlJaU5HUlRoQk5qY2lMejQ4YzNSdmNDQnZabVp6WlhROUlqRWlJSE4wYjNBdFkyOXNiM0k5SWlORU9ESTFOVEFpTHo0OEwyeHBibVZoY2tkeVlXUnBaVzUwUGp4c2FXNWxZWEpIY21Ga2FXVnVkQ0JwWkQwaWNHRnBiblF6WDJ4cGJtVmhjbDh5TlRSZk1qWTNPU0lnZURFOUlqSTVMakEwTlRVaUlIa3hQU0l5T0M0ek5UTXpJaUI0TWowaU1UVTNMamMzTXlJZ2VUSTlJakk0TGpNMU16TWlJR2R5WVdScFpXNTBWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWo0OGMzUnZjQ0J6ZEc5d0xXTnZiRzl5UFNJalJrTkVORFZHSWk4K1BITjBiM0FnYjJabWMyVjBQU0l4SWlCemRHOXdMV052Ykc5eVBTSWpSa1k0UkRZMklpOCtQQzlzYVc1bFlYSkhjbUZrYVdWdWRENDhiR2x1WldGeVIzSmhaR2xsYm5RZ2FXUTlJbkJoYVc1ME5GOXNhVzVsWVhKZk1qVTBYekkyTnpraUlIZ3hQU0l4TURNdU1ETXpJaUI1TVQwaU9DNHlOU0lnZURJOUlqRTRNaTR3TnpVaUlIa3lQU0k0TGpJMUlpQm5jbUZrYVdWdWRGVnVhWFJ6UFNKMWMyVnlVM0JoWTJWUGJsVnpaU0krUEhOMGIzQWdjM1J2Y0MxamIyeHZjajBpSXpZMFFrRTBReUl2UGp4emRHOXdJRzltWm5ObGREMGlNU0lnYzNSdmNDMWpiMnh2Y2owaUl6RTROa0UwTkNJdlBqd3ZiR2x1WldGeVIzSmhaR2xsYm5RK1BDOWtaV1p6UGp3dmMzWm5Qand2Wno0Z1BHY2djM1I1YkdVOUluUnlZVzV6Wm05eWJUcDBjbUZ1YzJ4aGRHVW9Namx3ZUN3Z016TTBjSGdwSWo0OGNtVmpkQ0IzYVdSMGFEMGlOak53ZUNJZ2FHVnBaMmgwUFNJeU5uQjRJaUJ5ZUQwaU9IQjRJaUJ5ZVQwaU9IQjRJaUJtYVd4c1BTSnlaMkpoS0RBc01Dd3dMREF1TmlraUlDOCtQSFJsZUhRZ2VEMGlNVEp3ZUNJZ2VUMGlNVGR3ZUNJZ1ptOXVkQzFtWVcxcGJIazlJaWREYjNWeWFXVnlJRTVsZHljc0lHMXZibTl6Y0dGalpTSWdabTl1ZEMxemFYcGxQU0l4TW5CNElpQm1hV3hzUFNKM2FHbDBaU0krUEhSemNHRnVJR1pwYkd3OUluSm5ZbUVvTWpVMUxESTFOU3d5TlRVc01DNDJLU0krU1VRNklEd3ZkSE53WVc0K01Ud3ZkR1Y0ZEQ0OEwyYytJRHhuSUhOMGVXeGxQU0owY21GdWMyWnZjbTA2ZEhKaGJuTnNZWFJsS0RJNWNIZ3NJRE0yTkhCNEtTSStQSEpsWTNRZ2QybGtkR2c5SWpFek0zQjRJaUJvWldsbmFIUTlJakkyY0hnaUlISjRQU0k0Y0hnaUlISjVQU0k0Y0hnaUlHWnBiR3c5SW5KblltRW9NQ3d3TERBc01DNDJLU0lnTHo0OGRHVjRkQ0I0UFNJeE1uQjRJaUI1UFNJeE4zQjRJaUJtYjI1MExXWmhiV2xzZVQwaUowTnZkWEpwWlhJZ1RtVjNKeXdnYlc5dWIzTndZV05sSWlCbWIyNTBMWE5wZW1VOUlqRXljSGdpSUdacGJHdzlJbmRvYVhSbElqNDhkSE53WVc0Z1ptbHNiRDBpY21kaVlTZ3lOVFVzTWpVMUxESTFOU3d3TGpZcElqNVFjbTkwYjJOdmJEb2dQQzkwYzNCaGJqNWFTMUF5VUR3dmRHVjRkRDQ4TDJjK1BDOXpkbWMrIn0=";
        assertEq(tokenURI, expectedTokenURI);
    }

    function test_MintTwoSameIdHash() public {
        vm.startPrank(address(1));
        proofOfP2PNFTV1.mintSBT();
        vm.stopPrank();

        // Register user 0x2 with same ID Hash
        ramp.setAccountInfo(
            address(2),
            IRamp.AccountInfo({
                venmoIdHash: bytes32(0x0741728e3aae72eda484e8ccbf00f843c38eae9c399b9bd7fb2b5ee7a055b6bf),
                deposits: new uint256[](0)
            })
        );
        vm.startPrank(address(2));
        proofOfP2PNFTV1.mintSBT();
        vm.stopPrank();
        
        uint256 currTokenId = proofOfP2PNFTV1.currentTokenId();
        assertEq(currTokenId, 2);

        address ownerOne = proofOfP2PNFTV1.ownerOf(1);
        assertEq(ownerOne, address(1));

        uint256 balanceOne = proofOfP2PNFTV1.balanceOf(address(1));
        assertEq(balanceOne, 1);

        uint256 mintedOne = proofOfP2PNFTV1.getTokenId(address(1));
        assertEq(mintedOne, 1);

        address ownerTwo = proofOfP2PNFTV1.ownerOf(2);
        assertEq(ownerTwo, address(2));

        uint256 balanceTwo = proofOfP2PNFTV1.balanceOf(address(2));
        assertEq(balanceTwo, 1);

        uint256 mintedTwo = proofOfP2PNFTV1.getTokenId(address(2));
        assertEq(mintedTwo, 2);
    }

    function test_MintTwoDifferentIdHash() public {
        vm.startPrank(address(1));
        proofOfP2PNFTV1.mintSBT();
        vm.stopPrank();

        // Register user 0x2
        ramp.setAccountInfo(
            address(2),
            IRamp.AccountInfo({
                venmoIdHash: bytes32(uint256(2)),
                deposits: new uint256[](0)
            })
        );
        vm.startPrank(address(2));
        proofOfP2PNFTV1.mintSBT();
        vm.stopPrank();
        
        uint256 currTokenId = proofOfP2PNFTV1.currentTokenId();
        assertEq(currTokenId, 2);

        address ownerOne = proofOfP2PNFTV1.ownerOf(1);
        assertEq(ownerOne, address(1));

        uint256 balanceOne = proofOfP2PNFTV1.balanceOf(address(1));
        assertEq(balanceOne, 1);

        uint256 mintedOne = proofOfP2PNFTV1.getTokenId(address(1));
        assertEq(mintedOne, 1);

        address ownerTwo = proofOfP2PNFTV1.ownerOf(2);
        assertEq(ownerTwo, address(2));

        uint256 balanceTwo = proofOfP2PNFTV1.balanceOf(address(2));
        assertEq(balanceTwo, 1);

        uint256 mintedTwo = proofOfP2PNFTV1.getTokenId(address(2));
        assertEq(mintedTwo, 2);
    }

    function test_RevertMintNotRegistered() public {
        vm.startPrank(address(0xd3ad));
        vm.expectRevert("Not registered");
        proofOfP2PNFTV1.mintSBT();
        vm.stopPrank();
    }

    function test_RevertMintNullified() public {
        vm.startPrank(address(1));
        proofOfP2PNFTV1.mintSBT();
        vm.expectRevert("Already minted for owner");
        proofOfP2PNFTV1.mintSBT();
        vm.stopPrank();
    }

    function test_RevertTransfers() public {
        vm.startPrank(address(1));
        proofOfP2PNFTV1.mintSBT();
        
        vm.expectRevert("ERC721 public transferFrom not allowed");
        proofOfP2PNFTV1.transferFrom(address(1), address(2), 1);

        vm.expectRevert("ERC721 public safeTransferFrom not allowed");
        proofOfP2PNFTV1.safeTransferFrom(address(1), address(2), 1);

        vm.expectRevert("ERC721 public safeTransferFrom not allowed");
        proofOfP2PNFTV1.safeTransferFrom(address(1), address(2), 1, "");
        vm.stopPrank();
    }
}
